import java.util.*;
import java.lang.*;
import java.io.*;

class solve {
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        return helper(graph, 0, m, new int[graph.length]);
    }
    
    public static boolean helper(boolean[][] graph, int node, int colors, int[] assignedColors) {
        if (node == graph.length) {
            return true;
        }
        for (int i = 1; i <= colors; i++) {
            if (isValidColor(graph, node, i, assignedColors)) {
                assignedColors[node] = i;
                if (helper(graph, node+1, colors, assignedColors)) {
                    return true;
                } else {
                    assignedColors[node] = 0;       //backtrack
                }
            }
        }
        return false;
    }

    public static boolean isValidColor(boolean[][] graph, int node, int color, int[] assignedColors) {
        for (int i = 0; i < graph.length; i++) {
            if (graph[node][i] && assignedColors[i] == color) {
                return false;
            }
        }
        return true;
    }
}
