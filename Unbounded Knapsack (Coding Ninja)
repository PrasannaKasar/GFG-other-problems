import java.util.*;

public class Solution {
    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {
        // Write your code here.
        int[][] dp = new int[n][w+1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return countWaysToMakeChange(dp, profit, weight, 0, w);
    }

    public static int countWaysToMakeChange(int[][] dp, int[] items, int[] weights, int index, int maxWeight) {
        if (maxWeight == 0 || index == items.length) {
            return 0;
        }
        if (dp[index][maxWeight] !=-1) {
            return dp[index][maxWeight];
        }
        int take = 0;
        if (maxWeight - weights[index] >= 0) {
            take = countWaysToMakeChange(dp, items, weights, index, maxWeight - weights[index]) + items[index];
        }
        int notTake = countWaysToMakeChange(dp, items, weights, index + 1, maxWeight);
        return dp[index][maxWeight] = Math.max(take, notTake);
    }
}
